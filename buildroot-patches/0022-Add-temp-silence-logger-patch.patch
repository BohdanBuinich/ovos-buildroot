From cdc6fdd79eb4d308a3203ed27b10a94579a803fe Mon Sep 17 00:00:00 2001
From: j1nx <p.steenbergen@j1nx.nl>
Date: Sun, 13 Mar 2022 15:41:22 +0100
Subject: [PATCH 1/1] Add temp silence logger patch

---
 .../python-filelock/0002-Silence-logger.patch | 25 +++++++++++++++++++
 1 file changed, 25 insertions(+)
 create mode 100644 package/python-filelock/0002-Silence-logger.patch

diff --git a/package/python-filelock/0002-Silence-logger.patch b/package/python-filelock/0002-Silence-logger.patch
new file mode 100644
index 0000000000..1c18aca964
--- /dev/null
+++ b/package/python-filelock/0002-Silence-logger.patch
@@ -0,0 +1,25 @@
+From d9c9e6f1c0e3ad12e6924f74b3c3f0df37f8a2e6 Mon Sep 17 00:00:00 2001
+From: j1nx <p.steenbergen@j1nx.nl>
+Date: Sun, 13 Mar 2022 15:39:55 +0100
+Subject: [PATCH 1/1] Silence logger
+
+---
+ src/filelock/_api.py | 2 +-
+ 1 file changed, 1 insertion(+), 1 deletion(-)
+
+diff --git a/src/filelock/_api.py b/src/filelock/_api.py
+index 3551d5d..343ab96 100644
+--- a/src/filelock/_api.py
++++ b/src/filelock/_api.py
+@@ -12,7 +12,7 @@ from typing import Any
+ from ._error import Timeout
+ 
+ _LOGGER = logging.getLogger("filelock")
+-
++_LOGGER.setLevel(logging.WARNING)
+ 
+ # This is a helper class which is returned by :meth:`BaseFileLock.acquire` and wraps the lock to make sure __enter__
+ # is not called twice when entering the with statement. If we would simply return *self*, the lock would be acquired
+-- 
+2.20.1
+
-- 
2.20.1

